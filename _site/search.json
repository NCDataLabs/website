[
  {
    "objectID": "services.html",
    "href": "services.html",
    "title": "Services",
    "section": "",
    "text": "Here are some examples of the kinds of projects I work on:\n\n\nDesigning and Building Internal Data Tools\n\n\n\n\n\nMany of the previous projects I’ve worked on have focused on getting value out of existing data and building tools to help people make decisions or automate workflows.\nThis could be:\n\na Shiny app\nan automated report or dashboard\nan R package\nan API for connecting data science outputs with other systems\nsomething else entirely\n\nI’ve worked on projects which have been rolled out to the NHS, large scale open source projects, and internal tools for automating slow and manual processes.\nMy approach focuses on building something that delivers clear business value aligned with your goals, and is usable and supportable, not just technically functional.\n\n\n\nStrengthening R Code for Production Use\n\n\n\n\n\nData science is distinct from software engineering in the approach to creating data products and tools which best support the needs of an organisation; the development cycle is often much faster and tends to be supported by domain experts whose skills skew more towards the interpretation and use of the data, or complex modelling.\nThis can mean tools which are effective to get a process off the ground need additional work to ensure that they remain efficient, reliable, and maintainable as they scale to more business-critical usage or more users.\nSometimes this is as simple as ensuring code is well-tested and contains all the checks and oversight to ensure confidence in the output it provides.\nOther times, this might require more extensive refactoring, including things like:\n\nsimplifying overcomplicated code and implementing best practices to reduce time and money spent on maintenance and lowering the barrier to entry for those working with it\nsetting up CICD pipelines to automating the testing and building of code and reduce or remove manual effort\nimplementing software engineering practices like logging, versioned release strategies, and dependency management to ensure reliability and integration with other tools\n\nI can help transform your existing code into robust production-quality tools, taking a practical approach which accounts for where you are now, where you want to get to, but most importantly how to get there in a way which will be sustainable in the long-term without overcomplicating things.\n\n\n\nPlanning and Delivering Migrations to R from SAS, Stata, or Excel\n\n\n\n\n\nWorking with open source tooling like R has huge benefits like reducing or removing dependency on expensive proprietary solutions, allowing greater flexibility in what you can do with your data, enabling reproducible workflows, and being part of a huge community of practitioners that you can learn from and benefit being part of.\nMigrating from existing tools can present some challenges though - working out how to translate functionality from an existing legacy tool to R and reaping the benefits while minimising disruption.\nSome of the ways I can help with this transition include:\n\nupskilling new R users in R basics, focusing on the skills they need to do their job\nanalysing legacy codebases and helping you plan the transition to R\ncreating R packages, Shiny apps, and other data products to replace previous workflows\nproviding training and mentoring on R best practices\ndesigning and implementing processes for managing internal codebases in a sustainable manner\nand more!\n\nEvery code migration is different, but I can help you take this step, focusing both on the technical side of things as well as the people aspects - which are just as important but easily overlooked!\n\n\n\nGeneral R Consulting and Team Support\nI’m also available for more general R and data science consulting and team support. Whatever it is that you need, feel free to get in touch, and we can see if I can help you, or refer you on to other wonderful folks I know in the wider R and data science ecosystem.\n\nTake a look here to see some of my previous projects, or visit my contact page to get in touch."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NC Data Labs",
    "section": "",
    "text": "What I Do\nHi, I’m Nic! I’m a data scientist, software engineer, and R developer. I am part of the team who maintain the arrow R package and co-author of Scaling Up with R and Arrow.\nI help organisations get more value from their R code, whether that means designing and building internal tools from scratch, strengthening fragile workflows, or planning a move away from legacy systems like SAS or Excel.\nRead more about services →\n\n\n\nA Bit About Me\nI’ve spent the last decade working across data science, software engineering, and open source; contributing to the Apache Arrow R project, building tooling used in the NHS, and teaching at international R conferences.\nSee selected project work →\nMore about me →\n\n\n\nGet in Touch\nWhether you need a code audit, help designing a data tool, or want to talk through an upcoming migration, I’m happy to have a conversation.\nContact →"
  },
  {
    "objectID": "blog/posts/rmigration.html",
    "href": "blog/posts/rmigration.html",
    "title": "Migrating to R - Challenges and Solutions",
    "section": "",
    "text": "Migrating to R isn’t just a technical rewrite; it’s a cultural and operational shift. I’ve been involved in multiple projects involving migrating to R from a previous solution like SAS or Excel, sometimes scoping out the roadmap for a complete transition, and other times doing the work itself on subcomponents of a wider project within a larger organisation. Every project is different, but common patterns (and pitfalls) emerge.\nIt’s easy to assume that it’s just about writing code, but in reality there’s more to consider here - it’s about culture, politics, and momentum as well."
  },
  {
    "objectID": "blog/posts/rmigration.html#why-migrations-to-r-are-harder-than-they-look",
    "href": "blog/posts/rmigration.html#why-migrations-to-r-are-harder-than-they-look",
    "title": "Migrating to R - Challenges and Solutions",
    "section": "Why Migrations to R Are Harder Than They Look",
    "text": "Why Migrations to R Are Harder Than They Look\nThere are lots of reasons people choose to migrate to R from other solutions, and these tend to be a mix of wanting to move away from expensive proprietary licenses, the skillsets of new data analysts and scientists skewing more towards modern technologies like R and Python, and wanting to implement more robust practices for code being used to support wider business processes. Factor in the ability to access cutting-edge statistical methods, interoperability with the wider modern tech stack, and scope for flexibility and customisation, and it’s hard to see why not to move.\n\nComplex existing codebases\nOne of the common themes I’ve seen in migrations is large codebases which feel vast and difficult to tackle. Many organisations depend on undocumented production code, with little understanding of its complexity or volume.\n\n\nSkillset gaps\nSkillsets are often mismatched with few people confident in both SAS and R. Much of the time, people are supporting legacy code which they’ve inherited from other programmers who have since moved on to other teams or left the organisation entirely and things may work but people don’t know how or why.\n\n\nMissing practices (version control, testing)\nIt’s also common to see codebases which just work but don’t follow modern practices such as using version control to track code changes and manage multiple people working on the same code, no tests or continuous integration and so the intended behaviour isn’t always well understood, is prone to bugs, and it’s impossible to confidently make changes without breaking something.\n\n\nOrganisational buy-in\nAnother challenge can be organisational commitment and buy-in. When there isn’t agreement around the change is necessary, it can be seen as time-consuming and difficult. If these transformations are not adequately supported and staff are expected to change tools without training or time to upskill, resistance is inevitable. Learning to program in R can be a rewarding experience, but without the proper setup can just be an annoyance.\nIt’s not as simple as taking code line by line and rewriting from one language to the other. Take the example of moving from SAS to R, the different frameworks have entirely different approaches, and a direct translation tends to leave people with inefficient code. Modern approaches like LLMs can help generate the equivalent code when switching over, but often a broader view is needed to do a good job of a transformation."
  },
  {
    "objectID": "blog/posts/rmigration.html#how-to-approach-migration-effectively",
    "href": "blog/posts/rmigration.html#how-to-approach-migration-effectively",
    "title": "Migrating to R - Challenges and Solutions",
    "section": "How to Approach Migration Effectively",
    "text": "How to Approach Migration Effectively\nWith a systematic approach which focuses on the right areas, it’s possible to do a successful migration in which the benefits are realised easily.\n\nAudit codebases: size, complexity, risk\nOne project I worked on was scoping out a migration for a large organisation which depended mostly on SAS, but had some R users, and had made the decision to transition away from SAS with a clear deadline for completion. I conducted an in-depth audit on their current setup and advised on the path forward.\nI started off by identifying the different stakeholders in the organisation. This is important as they tend to have divergent needs - people who are writing the code, people who are making decisions based on the results of their analyses, and people who are deploying the code in production environments.\nAuditing what you have is critical. As part of this project, I analysed the entire SAS codebase, scanning the code to work out how much there was and what the different SAS proc calls were. Auditing the code gives a clear view of the scope and complexity.\nWhen you have SAS code which uses, for example, mostly proc SQL, this is simpler to convert to the equivalent SQL in R. There are specific challenges which become apparent when you’re dealing with statistical analyses; there are some differences between R and SAS in terms of default parameter values and implementations of methodologies, but this can be tackled by identifying the key procs, and robustly testing outputs to compare them. There are also excellent projects like CAMIS which provide guidance on the differences between the different languages.\nThese audits must go beyond simple code analyses though; it’s also important to prioritise different areas of the codebase and distinguish between what is used in production versus what is more ad-hoc code.\n\n\nIdentify quick-win proof-of-concept projects\nAt this point, it’s often helpful to identify good candidates for proof-of-concept projects which allow clear demonstration of value and evidence of tangible benefits to the business. The best place to look is usually found by interviewing stakeholders and getting an idea of what really is difficult in their day-to-day work, or something which is particularly inefficient. This is where things like Shiny apps are excellent for transforming a time-consuming and manual process into something more engaging and easy to use.\nIn one project, users relied on a painful command-line workflow involving multiple configuration files and obscure commands. We built a Shiny app to wrap around this process with intuitive dropdowns, clear instructions, and a clean interface - massively improving usability and reducing error.\nQuick wins demonstrate value and generate the interest and engagement needed for a migration."
  },
  {
    "objectID": "blog/posts/rmigration.html#culture-matters-more-than-tools",
    "href": "blog/posts/rmigration.html#culture-matters-more-than-tools",
    "title": "Migrating to R - Challenges and Solutions",
    "section": "Culture Matters More Than Tools",
    "text": "Culture Matters More Than Tools\nUsers are where it’s important to focus most of your efforts.\n\nSupporting users through change\nUsers who are comfortable and confident in their existing tooling can be resistant to having that taken away from them. Change can be seen as disruptive and lead to pushback. Giving people quick wins in R is important so they can quickly build confidence.\n\n\nTraining, mentoring, lightweight standards\nA great way to get started is via training courses but there’s more that can be done here. Provide them with training on using R, and further support from experts - whether internal or external. Ensure that code is reviewed, but give clear guidance on how to conduct a good code review - make sure that it empowers and enables people rather than leaving them feeling criticised and incompetent.\nSupport can take different forms: one-on-one mentoring, team office hours, or embedding R champions within teams.\n\n\nBuilding community and momentum\nEither way, change happens when people understand the benefits and feel supported. And sometimes you just have to make it fun - for example, by running hackathons where people can blend new skills with creativity, or bringing in external speakers can also generate enthusiasm. Ultimately, you need some sense of community so people feel like they’re not just working away in isolation."
  },
  {
    "objectID": "blog/posts/rmigration.html#how-i-help",
    "href": "blog/posts/rmigration.html#how-i-help",
    "title": "Migrating to R - Challenges and Solutions",
    "section": "How I Help",
    "text": "How I Help\nI really enjoy these kinds of projects as it’s rewarding to see folks enthusiastically engage with tech which is new to them.\n\nAdvisory, proof-of-concept, guidance\nOn these kinds of projects, I tend to work in the role of advisor and implementer. What works well is to implement some kind of proof-of-concept project to both demonstrate value and then use as a prototype for what good looks like, and then provide guidance and support to teams updating their own codebases. I don’t tend to offer full codebase rewrites - the point is to enable teams to be self-reliant and empower them to be able to move independently in the longer term. That said, sometimes it makes sense for me to rewrite the more complex areas or provide additional support in terms of code reviews and introduction of best practices.\n\n\nTraining options\nI also offer training courses and support - whether that’s introductory R, more complex topics like working with version control, writing R packages, or a more bespoke course tailored to your needs.\nThe key thing here is providing structure and clarity, planning out the various stages, helping you identify what actions and infrastructure you’ll need in each part, and working out a path to make this work for you and your organisation.\n\n\nGet in Touch\nIf you’re planning a migration or are stuck partway through one and need experienced support, I can help you move it forward. Get in touch."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Nic Crane",
    "section": "",
    "text": "Hi, I’m Nic! I’m a data scientist, software engineer, and R consultant. I am part of the team who maintain the Apache Arrow project and co-author of Scaling Up with R and Arrow.\nI’ve been using R for 15 years, and am an active member of various communities and sub-communities.\nDuring my career, I’ve worked across multiple industries, including pharma, public health, academia, and startups, and have worked on a real mix of projects, encompassing everything from teaching new programmers how to work with R, to maintaining popular open source packages, to delving into the complexities of deploying R code in production environments where architecture and scalability matter.\nSome highlights:"
  },
  {
    "objectID": "about.html#nc-data-labs",
    "href": "about.html#nc-data-labs",
    "title": "Nic Crane",
    "section": "NC Data Labs",
    "text": "NC Data Labs\nThe name NC Data Labs came about because I wanted to emphasise the interplay between using known processes and past experience with deploying creative solutions to the technical problems I’m asked to help solve.\nEvery project and client is unique and there is never a one-size-fits-all approach that applies universally. Many consulting projects with a broader scope involve the iterative process of developing a hypothesis, testing it out, examining the results, and then deciding what’s next based on drawn conclusions, and so I wanted the name of the company to reflect that.\nI also found working at Ursa Labs one of the most technically challenging and exciting parts of my career and also wanted to call out to that.\nGet in touch →"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "Migrating to R - Challenges and Solutions\n\n\n\n\n\nTechnical migrations projects and their challenges.\n\n\n\n\n\nApr 28, 2025\n\n\nNic Crane\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Get in Touch",
    "section": "",
    "text": "If you’d like to talk about a project, need help with a code audit or tool development, or just want to sense-check an idea, feel free to reach out.\n\n  \n    Name\n    \n  \n  \n    Email\n    \n  \n  \n    Message\n    \n  \n  \n    Send"
  },
  {
    "objectID": "selected_work.html",
    "href": "selected_work.html",
    "title": "Selected Work",
    "section": "",
    "text": "Examples of how I’ve applied R, Shiny, and software engineering across internal tools, public-sector systems, and open-source projects.\n\n\nOpen Source Contribution – Apache Arrow Project\nType: Open Source Development & Authoring\n\n\n\n\n\nI’ve been an active contributor to the Apache Arrow R package, where I’ve worked on implementing features, acting as package maintainer, and extending dplyr support to Arrow. This work has influenced how I approach performance, reproducibility, and maintainability - both in open source and in client projects.\nDuring this time I also taught and wrote about Arrow:\n\nBig Data in R with Arrow – workshop taught at Posit Conf (2023, 2024)\n\nScaling up with R and Arrow – co-authored book on large-scale data workflows in R, due out in 2025\n\n\n\n\nSupporting Genomic Medicine in the NHS with R and Shiny\nType: Client Project (Team Build)\n\n\n\n\n\nI contributed to a modular Shiny application used in the national rollout of genomic testing within the NHS, building on the 100,000 Genomes Project. It let operational staff, lab teams, and programme managers track genomic samples and view key metrics without needing to interact directly with backend systems.\nWhat I worked on:\n- UI and server logic across multiple Shiny sub-apps\n- Integration with APIs and SQL databases\n- Interactive visualisations using plotly, visNetwork, sunburstR and other htmlwidget packages - Profiling, refactoring, and scaling reactive code for performance\nThe app was built to support a national rollout and continues to be used across NHS teams.\nWatch the talk →\n\n\n\nRefactoring a Legacy Shiny App for Maintainability\nType: Internal Tooling (Team Lead)\n\n\n\n\n\nWhile at Novartis, I led a small team responsible for maintaining an internal Shiny app used to manage R package installation requests. The codebase had become increasingly fragile and hard to maintain, with tightly coupled logic and growing technical debt.\nWhat I worked on:\n- Refactored reactive logic to simplify control flow and heavily modularised code to support maintainability\n- Introduced testing strategies and CI workflows\n- Improved onboarding for new developers by making the codebase easier to understand\nThe changes made the application significantly more maintainable and safer to extend as the team evolved.\n\n\n\nScoping a Large-Scale SAS to R Migration\nType: Consulting – Code Audit & Planning\n\n\n\n\n\nAs part of a consultancy engagement, I audited a large SAS codebase to help a client understand the feasibility and risk profile of migrating to R. The codebase was business-critical and had grown organically over many years.\nWhat I worked on:\n- Static code analysis of SAS codebase to estimate size and complexity (e.g. SQL-style vs. custom PROC logic)\n- Identified areas where statistical methods or parameter defaults might behave differently in R\n- Delivered a scoped migration plan to help inform budget, risk, and staffing decisions\nThe audit helped the client avoid assumptions about direct conversion and provided a structured way to evaluate next steps.\n\nGet in touch →"
  }
]