<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>NC Data Labs</title>
<link>https://www.ncdatalabs.com/blog/</link>
<atom:link href="https://www.ncdatalabs.com/blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Wed, 30 Apr 2025 23:00:00 GMT</lastBuildDate>
<item>
  <title>Prompt Design for LLMs in Shiny Apps - Exploring {querychat} in R</title>
  <dc:creator>Nic Crane</dc:creator>
  <link>https://www.ncdatalabs.com/blog/posts/querychat.html</link>
  <description><![CDATA[ 




<p>LLMs can handle straightforward conversations fluently but the unpredictable nature of responses means that more careful thought is needed when when embedding LLMs in Shiny apps.</p>
<p>A key area to focus on is effective prompt engineering, to enable more reliable responses and really scaffold how the model “thinks”.</p>
<p>One emerging use case in data science is allowing users to perform natural language queries against datasets without needing to formulate their questions as code or SQL queries. This lowers the barrier for entry for non-technical users and allows more flexible app workflow.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.ncdatalabs.com/blog/posts/querychat.png" class="img-fluid figure-img"></p>
<figcaption>Screenshot of a Shiny app using querychat for natural language querying</figcaption>
</figure>
</div>
<p>In preparation for my EARL 2025 workshop on integrating LLMs into Shiny apps, I explored the <a href="https://github.com/posit-dev/querychat/tree/main/r-package">querychat package</a>, written by Joe Cheng, to understand effective system prompt design for natural language data querying. It makes a great case study for effective prompt engineering for querying data.</p>
<p>You can see a live demo of the package in action <a href="https://jcheng.shinyapps.io/sidebot/">here</a>.</p>
<p>In this blog post, I’m going to take a look at some of the internals of the default system prompt used by querychat to show you the elements of its design you can use in other projects for working with LLMs to query data.</p>
<section id="the-system-prompt" class="level2">
<h2 class="anchored" data-anchor-id="the-system-prompt">The System Prompt</h2>
<p>When designing software containing LLM components, it’s crucial to have a good system prompt. This is the prompt which governs the overall behaviour of the LLM and is set up before the user has the chance to interact with it.</p>
<p>In the book <a href="https://learning.oreilly.com/library/view/ai-engineering/9781098166298/">AI Engineering</a>, Chip Huyen divides LLM prompts into 3 components:</p>
<ol type="1">
<li>The task description</li>
<li>Examples of how to do the task</li>
<li>A specific task request</li>
</ol>
<p>Chip goes on to explain that items 1 and 2 should be included in the system prompt and then item 3 is the part that the user adds.</p>
<p>There are specific techniques which can be used to create an effective system prompt that reduce the chance of errors, inaccuracies, and other undesirable results.</p>
<p>I’m going to take the querychat system prompt one section at a time and discuss the techniques being used. You can see the full prompt <a href="https://github.com/posit-dev/querychat/blob/main/r-package/inst/prompt/prompt.md">here</a>.</p>
<section id="define-a-role" class="level3">
<h3 class="anchored" data-anchor-id="define-a-role">Define a Role</h3>
<p>A useful starting point is asking the model to assume a specific role, which will guide the perspective it assumes when answering. This helps limit the scope of potential answers and makes results more predictable and consistent.</p>
<p>The querychat system prompt starts off with a straightforward description of the role of the LLM and a brief overview of the kinds of tasks it will be fulfilling.</p>
<blockquote class="blockquote">
<p>You are a chatbot that is displayed in the sidebar of a data dashboard. You will be asked to perform various tasks on the data, such as filtering, sorting, and answering questions.</p>
</blockquote>
</section>
<section id="allow-it-to-be-unsure" class="level3">
<h3 class="anchored" data-anchor-id="allow-it-to-be-unsure">Allow it to be unsure</h3>
<p>A common concern when working with LLMs is the risk of false information. By explicitly prompting the LLM on how to behave when it’s unsure, you reduce the chance of encountering confidently stated low-certainty responses.</p>
<p>The querychat system prompt tells the LLM to ask users additional questions to account for uncertainty instead of just trying to generate a response based on ambiguous inputs.</p>
<blockquote class="blockquote">
<p>It’s important that you get clear, unambiguous instructions from the user, so if the user’s request is unclear in any way, you should ask for clarification. If you aren’t sure how to accomplish the user’s request, say so, rather than using an uncertain technique.</p>
</blockquote>
<p>Asking for clarification can be a useful guardrail, but it’s a trade-off between accuracy and frustrating users or slowing down simple tasks.</p>
</section>
<section id="give-it-cues-about-output" class="level3">
<h3 class="anchored" data-anchor-id="give-it-cues-about-output">Give it cues about output</h3>
<p>Without any cues as to the format of the output, many LLMs tend to err on the side of being wordy and adding extra conversational sentences. Providing cues as to the desired output format helps to both cut down this information, as well as reducing costs and speeding up responses by just returning what is needed.</p>
<p>The querychat system prompt specifically mentions where the output will be displayed and explicitly mentions what <em>not</em> to include in the output.</p>
<blockquote class="blockquote">
<p>The user interface in which this conversation is being shown is a narrow sidebar of a dashboard, so keep your answers concise and don’t include unnecessary patter, nor additional prompts or offers for further assistance.</p>
</blockquote>
</section>
<section id="add-context-about-the-data" class="level3">
<h3 class="anchored" data-anchor-id="add-context-about-the-data">Add context about the data</h3>
<p>It’s not just what <em>not</em> to include which is important though. Even if you’re working with an app which doesn’t have the entire dataset sent to an LLM for security or cost reasons, you can still provide additional context to help guide the LLM.</p>
<p>The querychat system prompt for a particular session is set up using <code>querychat_init()</code>, into which is also passed the data frame to be queried. High-level summary data is extracted from the dataset, and this summary forms part of the system prompt.</p>
<p>In this case, I initialised querychat with the <code>mtcars</code> dataset, and so the system prompt contains a summary of the columns, including their names, data types, and value ranges.</p>
<blockquote class="blockquote">
<p>You have at your disposal a DuckDB database containing this schema:</p>
</blockquote>
<pre><code>Table: mtcars
Columns:
- mpg (FLOAT)
  Range: 10.4 to 33.9
- cyl (FLOAT)
  Range: 4 to 8
- disp (FLOAT)
  Range: 71.1 to 472
- hp (FLOAT)
  Range: 52 to 335
- drat (FLOAT)
  Range: 2.76 to 4.93
- wt (FLOAT)
  Range: 1.513 to 5.424
- qsec (FLOAT)
  Range: 14.5 to 22.9
- vs (FLOAT)
  Range: 0 to 1
- am (FLOAT)
  Range: 0 to 1
- gear (FLOAT)
  Range: 3 to 5
- carb (FLOAT)
  Range: 1 to 8</code></pre>
</section>
<section id="defensive-prompt-engineering" class="level3">
<h3 class="anchored" data-anchor-id="defensive-prompt-engineering">Defensive prompt engineering</h3>
<p>A potential risk in exposing LLMs to outside use is the potential use of prompt attacks to expose data which isn’t intended for public consumption or even just using the LLM for unauthorised purposes.</p>
<p>Defending against these risks often requires checks at multiple levels depending on level of risk, but a simple approach for low-risk projects involves explicitly stating what information can and cannot be used.</p>
<p>The querychat system prompt explicitly refers to the data which can be used in returning a response.</p>
<blockquote class="blockquote">
<p>For security reasons, you may only query this specific table.</p>
</blockquote>
<p>Note however, that this isn’t full solution to potential abuse, and in production systems it’s crucial to validate user input in more depth.</p>
</section>
<section id="describing-specific-tasks-part-1" class="level3">
<h3 class="anchored">Describing specific tasks part 1</h3>
<p>When embedding conversational LLMs into an app, you may want the LLM to be responsible for different tasks. The <a href="https://platform.openai.com/docs/guides/prompt-engineering/strategy-split-complex-tasks-into-simpler-subtasks">Open AI guide to prompt engineering</a> discusses a strategy for returning the most relevant information by breaking this down into 2 steps:</p>
<ol type="1">
<li>Intent classification - working out what it is that the user wants to achieve</li>
<li>Providing additional instructions based on the user’s intent</li>
</ol>
<p>In a simple app, this multi-stage implementation isn’t necessary, and providing a list of possible tasks with relevant instructions can suffice.</p>
<p>The querychat system prompt does this, describing different tasks, including the usage of tools to return the relevant information. The instructions contain lots of detail, and we can infer that these clarifications were likely added to the prompt iteratively by experimenting with shorter instructions and seeing what needed to be added to get consistent results returned. This is typical of iterative prompt design and is a key part of prompt engineering.</p>
<blockquote class="blockquote">
<p>There are several tasks you may be asked to do:</p>
<h2 id="task-filtering-and-sorting" class="anchored" data-anchor-id="describing-specific-tasks-part-1">Task: Filtering and sorting</h2>
<p>The user may ask you to perform filtering and sorting operations on the dashboard; if so, your job is to write the appropriate SQL query for this database. Then, call the tool <code>update_dashboard</code>, passing in the SQL query and a new title summarizing the query (suitable for displaying at the top of dashboard). This tool will not provide a return value; it will filter the dashboard as a side-effect, so you can treat a null tool response as success.</p>
<ul>
<li><strong>Call <code>update_dashboard</code> every single time</strong> the user wants to filter/sort; never tell the user you’ve updated the dashboard unless you’ve called <code>update_dashboard</code> and it returned without error.</li>
<li>The SQL query must be a <strong>DuckDB SQL</strong> SELECT query. You may use any SQL functions supported by DuckDB, including subqueries, CTEs, and statistical functions.</li>
<li>The user may ask to “reset” or “start over”; that means clearing the filter and title. Do this by calling <code>update_dashboard({"query": "", "title": ""})</code>.</li>
<li>Queries passed to <code>update_dashboard</code> MUST always <strong>return all columns that are in the schema</strong> (feel free to use <code>SELECT *</code>); you must refuse the request if this requirement cannot be honored, as the downstream code that will read the queried data will not know how to display it. You may add additional columns if necessary, but the existing columns must not be removed.</li>
<li>When calling <code>update_dashboard</code>, <strong>don’t describe the query itself</strong> unless the user asks you to explain. Don’t pretend you have access to the resulting data set, as you don’t.</li>
</ul>
</blockquote>
<p>Later we’ll look at a different task example in the querychat default system prompt.</p>
</section>
<section id="be-specific-about-code-to-generate" class="level3">
<h3 class="anchored" data-anchor-id="be-specific-about-code-to-generate">Be specific about code to generate</h3>
<p>In the background, querychat is generating SQL queries to run against the specified dataset. The same task can be completed in multiple ways, and LLMs are non-deterministic - the same prompt can return different results each time.</p>
<p>When generating code with an LLM, giving additional cues on the structure of the code will generate more predictable results.</p>
<blockquote class="blockquote">
<p>For reproducibility, follow these rules as well:</p>
<ul>
<li>Optimize the SQL query for <strong>readability over efficiency</strong>.</li>
<li>Always filter/sort with a <strong>single SQL query</strong> that can be passed directly to <code>update_dashboard</code>, even if that SQL query is very complicated. It’s fine to use subqueries and common table expressions.</li>
<li>In particular, you MUST NOT use the <code>query</code> tool to retrieve data and then form your filtering SQL SELECT query based on that data. This would harm reproducibility because any intermediate SQL queries will not be preserved, only the final one that’s passed to <code>update_dashboard</code>.</li>
<li>To filter based on standard deviations, percentiles, or quantiles, use a common table expression (WITH) to calculate the stddev/percentile/quartile that is needed to create the proper WHERE clause.</li>
<li>Include comments in the SQL to explain what each part of the query does.</li>
</ul>
</blockquote>
</section>
<section id="include-examples-of-good-responses" class="level3">
<h3 class="anchored" data-anchor-id="include-examples-of-good-responses">Include examples of good responses</h3>
<p>One of the most effective strategies for getting the responses you want from an LLM is to provide examples of interactions between the user and the system.</p>
<p>This is even more important when the workflow involves tools which the LLM can call.</p>
<p>The querychat system prompt shows a specific example of a user query, and how the LLM should use the <code>update_dashboard()</code> tool to update the dashboard and what text responses to return to the user.</p>
<blockquote class="blockquote">
<p>Example of filtering and sorting:</p>
<p>[User]<br>
Show only rows where the value of x is greater than average.<br>
[/User]<br>
[ToolCall]<br>
update_dashboard({query: “SELECT * FROM tablex &gt; (SELECT AVG(x) FROM table)”, title: “Above average x values”})<br>
[/ToolCall]<br>
[ToolResponse]<br>
null<br>
[/ToolResponse]<br>
[Assistant]<br>
I’ve filtered the dashboard to show only rows where the value of x is greater than average.<br>
[/Assistant]</p>
</blockquote>
</section>
<section id="describing-specific-tasks-part-2" class="level3">
<h3 class="anchored">Describing specific tasks part 2</h3>
<p>Earlier the system prompt gave instructions for how the LLM should filter and sort the data, and went on to go into more detail about:</p>
<ul>
<li>which tools to call</li>
<li>how to respond to specific user requests to start over</li>
<li>specific guidance about the code to generate</li>
<li>example of what a good user-system interaction might look like</li>
</ul>
<p>This is repeated for a different task concerning user questions about the data, and responding to vague requests.</p>
<blockquote class="blockquote">
<h2 id="task-answering-questions-about-the-data" class="anchored" data-anchor-id="describing-specific-tasks-part-2">Task: Answering questions about the data</h2>
<p>The user may ask you questions about the data. You have a <code>query</code> tool available to you that can be used to perform a SQL query on the data.</p>
<p>The response should not only contain the answer to the question, but also, a comprehensive explanation of how you came up with the answer. You can assume that the user will be able to see verbatim the SQL queries that you execute with the <code>query</code> tool.</p>
<p>Always use SQL to count, sum, average, or otherwise aggregate the data. Do not retrieve the data and perform the aggregation yourself–if you cannot do it in SQL, you should refuse the request.</p>
<p>Example of question answering:</p>
<p>[User]<br>
What are the average values of x and y?<br>
[/User]<br>
[ToolCall]<br>
query({query: “SELECT AVG(x) AS average_x, AVG(y) as average_y FROM table”})<br>
[/ToolCall]<br>
[ToolResponse]<br>
[{“average_x”: 3.14, “average_y”: 6.28}]<br>
[/ToolResponse]<br>
[Assistant]<br>
The average value of x is 3.14. The average value of y is 6.28.<br>
[/Assistant]</p>
<h2 id="task-providing-general-help" class="anchored">Task: Providing general help</h2>
<p>If the user provides a vague help request, like “Help” or “Show me instructions”, describe your own capabilities in a helpful way, including examples of questions they can ask. Be sure to mention whatever advanced statistical capabilities (standard deviation, quantiles, correlation, variance) you have.</p>
<h3 id="showing-example-questions" class="anchored">Showing example questions</h3>
<p>If you find yourself offering example questions to the user as part of your response, wrap the text of each prompt in <code>&lt;span class="suggestion"&gt;</code> tags. For example:</p>
<pre><code>* &lt;span class="suggestion"&gt;Suggestion 1.&lt;/span&gt;
* &lt;span class="suggestion"&gt;Suggestion 2.&lt;/span&gt;
* &lt;span class="suggestion"&gt;Suggestion 3.&lt;/span&gt;</code></pre>
</blockquote>
</section>
<section id="additional-context-about-tools" class="level3">
<h3 class="anchored">Additional context about tools</h3>
<p>The code in querychat uses duckdb to perform the queries and to ensure that the LLM has enough context to use it effectively, the system prompt adds some DuckDB-specific information to help.</p>
<blockquote class="blockquote">
<h2 id="duckdb-sql-tips" class="anchored" data-anchor-id="additional-context-about-tools">DuckDB SQL tips</h2>
<ul>
<li><code>percentile_cont</code> and <code>percentile_disc</code> are “ordered set” aggregate functions. These functions are specified using the WITHIN GROUP (ORDER BY sort_expression) syntax, and they are converted to an equivalent aggregate function that takes the ordering expression as the first argument. For example, <code>percentile_cont(fraction) WITHIN GROUP (ORDER BY column [(ASC|DESC)])</code> is equivalent to <code>quantile_cont(column, fraction ORDER BY column [(ASC|DESC)])</code>.</li>
</ul>
</blockquote>
</section>
</section>
<section id="takeaways" class="level2">
<h2 class="anchored" data-anchor-id="takeaways">Takeaways</h2>
<p>The querychat system prompt is an example of how effective prompt engineering allows for natural language querying of data through the use of:</p>
<ul>
<li>defining a specific role for the LLM to assume when responding</li>
<li>defining desired behaviour when the LLM is not certain of the correct response</li>
<li>providing cues for the expected output</li>
<li>adding context about the data</li>
<li>defensive prompt engineering to lower the chances of abuse</li>
<li>where there are multiple tasks, giving detailed instructions about each</li>
<li>when code is being generated providing guidance about styling and approach</li>
<li>include examples of good responses</li>
</ul>
<p>You can read more about effective prompt design in the <a href="https://ellmer.tidyverse.org/articles/prompt-design.html">{ellmer} vignette</a>, or for a longer form description I’d recommend <a href="https://www.oneusefulthing.org/p/getting-started-with-ai-good-enough">the article linked to from the same vignette</a> by Ethan Mollick about “Good Enough Prompt Design”.</p>
<p>I’ll be delving into these ideas and others in my EARL 2025 workshop “Deploying AI in R with {ellmer} and {shiny}: From Experimentation to Production”, which you can sign up to <a href="https://earl-conference.com/tickets/">here</a>.</p>


</section>

 ]]></description>
  <guid>https://www.ncdatalabs.com/blog/posts/querychat.html</guid>
  <pubDate>Wed, 30 Apr 2025 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Migrating to R - Challenges and Solutions</title>
  <dc:creator>Nic Crane</dc:creator>
  <link>https://www.ncdatalabs.com/blog/posts/rmigration.html</link>
  <description><![CDATA[ 




<p>Migrating to R isn’t just a technical rewrite; it’s a cultural and operational shift. I’ve been involved in multiple projects involving migrating to R from a previous solution like SAS or Excel, sometimes scoping out the roadmap for a complete transition, and other times doing the work itself on subcomponents of a wider project within a larger organisation. Every project is different, but common patterns (and pitfalls) emerge.</p>
<p>It’s easy to assume that it’s just about writing code, but in reality there’s more to consider here - it’s about culture, politics, and momentum as well.</p>
<section id="why-migrations-to-r-are-harder-than-they-look" class="level2">
<h2 class="anchored" data-anchor-id="why-migrations-to-r-are-harder-than-they-look">Why Migrations to R Are Harder Than They Look</h2>
<p>There are lots of reasons people choose to migrate to R from other solutions, and these tend to be a mix of wanting to move away from expensive proprietary licenses, the skillsets of new data analysts and scientists skewing more towards modern technologies like R and Python, and wanting to implement more robust practices for code being used to support wider business processes. Factor in the ability to access cutting-edge statistical methods, interoperability with the wider modern tech stack, and scope for flexibility and customisation, and it’s hard to see why not to move.</p>
<section id="complex-existing-codebases" class="level3">
<h3 class="anchored" data-anchor-id="complex-existing-codebases">Complex existing codebases</h3>
<p>One of the common themes I’ve seen in migrations is large codebases which feel vast and difficult to tackle. Many organisations depend on undocumented production code, with little understanding of its complexity or volume.</p>
</section>
<section id="skillset-gaps" class="level3">
<h3 class="anchored" data-anchor-id="skillset-gaps">Skillset gaps</h3>
<p>Skillsets are often mismatched with few people confident in both SAS and R. Much of the time, people are supporting legacy code which they’ve inherited from other programmers who have since moved on to other teams or left the organisation entirely and things may work but people don’t know how or why.</p>
</section>
<section id="missing-practices-version-control-testing" class="level3">
<h3 class="anchored" data-anchor-id="missing-practices-version-control-testing">Missing practices (version control, testing)</h3>
<p>It’s also common to see codebases which just work but don’t follow modern practices such as using version control to track code changes and manage multiple people working on the same code, no tests or continuous integration and so the intended behaviour isn’t always well understood, is prone to bugs, and it’s impossible to confidently make changes without breaking something.</p>
</section>
<section id="organisational-buy-in" class="level3">
<h3 class="anchored" data-anchor-id="organisational-buy-in">Organisational buy-in</h3>
<p>Another challenge can be organisational commitment and buy-in. When there isn’t agreement around the change is necessary, it can be seen as time-consuming and difficult. If these transformations are not adequately supported and staff are expected to change tools without training or time to upskill, resistance is inevitable. Learning to program in R can be a rewarding experience, but without the proper setup can just be an annoyance.</p>
<p>It’s not as simple as taking code line by line and rewriting from one language to the other. Take the example of moving from SAS to R, the different frameworks have entirely different approaches, and a direct translation tends to leave people with inefficient code. Modern approaches like LLMs can help generate the equivalent code when switching over, but often a broader view is needed to do a good job of a transformation.</p>
</section>
</section>
<section id="how-to-approach-migration-effectively" class="level2">
<h2 class="anchored" data-anchor-id="how-to-approach-migration-effectively">How to Approach Migration Effectively</h2>
<p>With a systematic approach which focuses on the right areas, it’s possible to do a successful migration in which the benefits are realised easily.</p>
<section id="audit-codebases-size-complexity-risk" class="level3">
<h3 class="anchored" data-anchor-id="audit-codebases-size-complexity-risk">Audit codebases: size, complexity, risk</h3>
<p>One project I worked on was scoping out a migration for a large organisation which depended mostly on SAS, but had some R users, and had made the decision to transition away from SAS with a clear deadline for completion. I conducted an in-depth audit on their current setup and advised on the path forward.</p>
<p>I started off by identifying the different stakeholders in the organisation. This is important as they tend to have divergent needs - people who are writing the code, people who are making decisions based on the results of their analyses, and people who are deploying the code in production environments.</p>
<p>Auditing what you have is critical. As part of this project, I analysed the entire SAS codebase, scanning the code to work out how much there was and what the different SAS proc calls were. Auditing the code gives a clear view of the scope and complexity.</p>
<p>When you have SAS code which uses, for example, mostly proc SQL, this is simpler to convert to the equivalent SQL in R. There are specific challenges which become apparent when you’re dealing with statistical analyses; there are some differences between R and SAS in terms of default parameter values and implementations of methodologies, but this can be tackled by identifying the key procs, and robustly testing outputs to compare them. There are also excellent projects like <a href="https://psiaims.github.io/CAMIS/">CAMIS</a> which provide guidance on the differences between the different languages.</p>
<p>These audits must go beyond simple code analyses though; it’s also important to prioritise different areas of the codebase and distinguish between what is used in production versus what is more ad-hoc code.</p>
</section>
<section id="identify-quick-win-proof-of-concept-projects" class="level3">
<h3 class="anchored" data-anchor-id="identify-quick-win-proof-of-concept-projects">Identify quick-win proof-of-concept projects</h3>
<p>At this point, it’s often helpful to identify good candidates for proof-of-concept projects which allow clear demonstration of value and evidence of tangible benefits to the business. The best place to look is usually found by interviewing stakeholders and getting an idea of what really is difficult in their day-to-day work, or something which is particularly inefficient. This is where things like Shiny apps are excellent for transforming a time-consuming and manual process into something more engaging and easy to use.</p>
<p>In one project, users relied on a painful command-line workflow involving multiple configuration files and obscure commands. We built a Shiny app to wrap around this process with intuitive dropdowns, clear instructions, and a clean interface - massively improving usability and reducing error.</p>
<p>Quick wins demonstrate value and generate the interest and engagement needed for a migration.</p>
</section>
</section>
<section id="culture-matters-more-than-tools" class="level2">
<h2 class="anchored" data-anchor-id="culture-matters-more-than-tools">Culture Matters More Than Tools</h2>
<p>Users are where it’s important to focus most of your efforts.</p>
<section id="supporting-users-through-change" class="level3">
<h3 class="anchored" data-anchor-id="supporting-users-through-change">Supporting users through change</h3>
<p>Users who are comfortable and confident in their existing tooling can be resistant to having that taken away from them. Change can be seen as disruptive and lead to pushback. Giving people quick wins in R is important so they can quickly build confidence.</p>
</section>
<section id="training-mentoring-lightweight-standards" class="level3">
<h3 class="anchored" data-anchor-id="training-mentoring-lightweight-standards">Training, mentoring, lightweight standards</h3>
<p>A great way to get started is via training courses but there’s more that can be done here. Provide them with training on using R, and further support from experts - whether internal or external. Ensure that code is reviewed, but give clear guidance on how to conduct a good code review - make sure that it empowers and enables people rather than leaving them feeling criticised and incompetent.</p>
<p>Support can take different forms: one-on-one mentoring, team office hours, or embedding R champions within teams.</p>
</section>
<section id="building-community-and-momentum" class="level3">
<h3 class="anchored" data-anchor-id="building-community-and-momentum">Building community and momentum</h3>
<p>Either way, change happens when people understand the benefits and feel supported. And sometimes you just have to make it fun - for example, by running hackathons where people can blend new skills with creativity, or bringing in external speakers can also generate enthusiasm. Ultimately, you need some sense of community so people feel like they’re not just working away in isolation.</p>
</section>
</section>
<section id="how-i-help" class="level2">
<h2 class="anchored" data-anchor-id="how-i-help">How I Help</h2>
<p>I really enjoy these kinds of projects as it’s rewarding to see folks enthusiastically engage with tech which is new to them.</p>
<section id="advisory-proof-of-concept-guidance" class="level3">
<h3 class="anchored" data-anchor-id="advisory-proof-of-concept-guidance">Advisory, proof-of-concept, guidance</h3>
<p>On these kinds of projects, I tend to work in the role of advisor and implementer. What works well is to implement some kind of proof-of-concept project to both demonstrate value and then use as a prototype for what good looks like, and then provide guidance and support to teams updating their own codebases. I don’t tend to offer full codebase rewrites - the point is to enable teams to be self-reliant and empower them to be able to move independently in the longer term. That said, sometimes it makes sense for me to rewrite the more complex areas or provide additional support in terms of code reviews and introduction of best practices.</p>
</section>
<section id="training-options" class="level3">
<h3 class="anchored" data-anchor-id="training-options">Training options</h3>
<p>I also offer training courses and support - whether that’s introductory R, more complex topics like working with version control, writing R packages, or a more bespoke course tailored to your needs.</p>
<p>The key thing here is providing structure and clarity, planning out the various stages, helping you identify what actions and infrastructure you’ll need in each part, and working out a path to make this work for you and your organisation.</p>
</section>
<section id="get-in-touch" class="level3">
<h3 class="anchored" data-anchor-id="get-in-touch">Get in Touch</h3>
<p>If you’re planning a migration or are stuck partway through one and need experienced support, I can help you move it forward. <a href="../../contact.html">Get in touch</a>.</p>


</section>
</section>

 ]]></description>
  <guid>https://www.ncdatalabs.com/blog/posts/rmigration.html</guid>
  <pubDate>Sun, 27 Apr 2025 23:00:00 GMT</pubDate>
</item>
</channel>
</rss>
